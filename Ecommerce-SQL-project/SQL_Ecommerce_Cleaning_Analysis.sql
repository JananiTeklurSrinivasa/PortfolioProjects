------------------------------------
--Data Cleaning and Transformation
------------------------------------
--Add Full name Column, add hypens between phone number

--adding new column and updating it Customers table
--1.full_name columns
USE Ecommerce;
SELECT * FROM Customers;
ALTER TABLE Customers ADD full_name VARCHAR(100);
UPDATE Customers SET full_name = concat(first_name,' ',last_name);

--2.Reformatting phone number to add hyphens between them
UPDATE Customers SET phone_number = FORMAT(CAST(phone_number AS bigint), '##-###-####');

--3.Adding a category column in Products table
ALTER TABLE Products ADD category VARCHAR(50);
UPDATE Products SET category = 'Electronics'
-----------------------------------------------
--Data Analysis
------------------------------------------------
--4.Get all customers who have placed orders.
SELECT C.customer_id 
FROm Customers AS C
INNER JOIN orders AS O 
ON C.customer_id = O.customer_id;

--5.Get the total number of products in the database
SELECT COUNT(DISTINCT(product_id)) AS product_count
FROM Products;

--6.Calculate the total revenue generated by all products
SELECT P.product_name,
SUM(D.quantity*P.price) AS total_revenue
FROM Products AS P 
JOIN Order_Details AS D
ON P.product_id = D.product_id
GROUP BY P.product_name;

--7.Get the order details and Product names for all orders
SELECT O.order_id,
D.order_detail_id,
D.product_id,
D.quantity,
P.product_name
FROM Orders AS O
JOIN Order_Details AS D
ON O.order_id = D.order_id
JOIN Products AS P
ON P.product_id = D.product_id;

--8.Calculate the total revenue generated by a specific customer - Emily Jones
SELECT C.full_name,
SUM(O.total_amount) AS total_revenue
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer_id
WHERE C.full_name = 'Emily Jones' 
GROUP BY C.full_name;

--9.Get the customer who made the highest total purchase
SELECT TOP 1
C.full_name,
SUM(O.total_Amount) AS total_revenue
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer_id
GROUP BY C.full_name
ORDER BY 2 desc

--10.Find the total revenue generated by each customer
SELECT C.full_name,
SUM(O.total_amount) AS total_revenue
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer_id
GROUP BY C.full_name
ORDER BY 2 desc;

--11.Retrieve the number of orders placed in each month
SELECT * FROM Orders;
SELECT MONTH(order_date) AS month,
COUNT(*) AS no_of_orders
FROM Orders
GROUP BY MONTH(order_date);

--12.Calculate the average price of products in each category 
SELECT category,
ROUND(AVG(price),2) AS avg_price
FROM Products
GROUP BY category;

--13.Find the maximum and minimum prices of products in each category
SELECT category,
MAX(price) AS max_price,
MIN(price) AS min_price
FROM Products
GROUP BY category;

--14.Calculate the total quantity of each product sold
SELECT P.product_name,
SUM(O.quantity) AS total_qty
FROM Order_Details AS O
JOIN Products AS P
ON O.product_id = P.product_id
GROUP BY P.product_name;

--15.Retrieve all orders with customer details
SELECT O.*,
C.full_name,
C.email,
C.phone_number
FROm Orders AS O
JOIn Customers AS C
ON O.customer_id = C.Customer_id;

--16.Retrieve the top 5 customers based on their total purchase amount
SELECT TOP 5
C.full_name,
SUM(O.total_amount) AS total_revenue
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer_id
GROUP BY C.full_name
ORDER BY 2 desc;

--17.Calculate the cumulative total revenue generated by each product over time

WITH T1 AS
(SELECT P.product_id, O.order_date,
SUM(D.quantity*P.price) AS total_revenue
FROM Order_details AS D
JOIN Products AS P
ON D.product_id = P.product_id
JOIN Orders AS O
ON D.Order_id = O.order_id
GROUP BY P.product_id , O.order_date
)
SELECT product_id,
order_date,
SUM(total_revenue) OVER(PARTITION BY product_id ORDER BY order_date) AS Cummulative_revenue
FROM T1
ORDER BY product_id,order_Date;

--18.Retrieve the product with the highest revenue in each order
WITH T1 AS
(SELECT 
D.order_id,
MAX(D.quantity*P.price) AS total_revenue
FROM Order_details AS D
JOIN Products AS P
ON D.product_id = P.product_id
GROUP BY D.order_id)

SELECT O.order_id,
P.product_name,
T1.total_revenue
FROM Orders AS O
JOIN T1
ON O.order_id = T1.order_id
JOIN Order_Details AS D
ON D.order_id = O.order_id
JOIN Products AS P 
ON D.product_id = P.product_id
WHERE (P.price * D.quantity) = T1.total_revenue;

--19.Rank the customers based on their total purchase amount
WITh T1 AS
(
SELECT C.customer_id,
C.full_name,
SUM(O.total_amount)  AS revenue
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id  = O.customer_id
GROUP BY  C.customer_id,
C.full_name)
SELECT
customer_id,full_name,revenue,
RANK() OVER(ORDER BY revenue DESC) AS Ranking
FROM T1

--20.Find the top-selling products and their quantities using a window function
WITH T1 AS
(SELECT P.product_id,
P.product_name,
SUM(D.quantity) AS total_units_ordered,
ROW_NUMBER() OVER(ORDER BY SUM(D.quantity) desc) AS ranking
FROM Products AS P
JOIN Order_Details AS D
ON P.product_id = D.product_id
GROUP BY P.product_id,
P.product_name
)

SELECT  TOP 5
* FROM T1 
ORDER BY ranking ;











